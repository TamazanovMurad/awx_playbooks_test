---
- name: Dynamic Wallpaper Synchronizer for Linux
  hosts: all
  become: true
  tasks:

    - name: Install required system packages
      ansible.builtin.apt:
        name:
          - wget
          - python3-pip
          - dconf-cli
          - feh
        state: present
        update_cache: true

    - name: Ensure wallpaper directory exists
      ansible.builtin.file:
        path: /usr/share/backgrounds
        state: directory
        mode: '0755'

    - name: Download wallpaper image
      ansible.builtin.get_url:
        url: "https://images.unsplash.com/photo-1483982258113-b72862e6cff6?q=80&w=1740&auto=format&fit=crop&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fA%3D%3D"
        dest: /usr/share/backgrounds/wallpaper.jpg
        mode: '0644'

    - name: Fetch dynamic quote
      ansible.builtin.uri:
        url: "https://api.quotable.io/random"
        return_content: true
      register: quote_response

    - name: Extract quote text
      set_fact:
        quote_text: "{{ quote_response.json.content }}"

    - name: Fetch local weather
      ansible.builtin.uri:
        url: "https://wttr.in/?format=%C"
        return_content: true
      register: weather_response

    - name: Extract weather description
      set_fact:
        weather_text: "{{ weather_response.content | trim }}"

    - name: Deploy Python script for text overlay
      ansible.builtin.copy:
        dest: /usr/local/bin/overlay_text.py
        mode: '0755'
        content: |
          from PIL import Image, ImageDraw, ImageFont
          import sys

          image_path = sys.argv[1]
          output_path = sys.argv[2]
          text1 = sys.argv[3]
          text2 = sys.argv[4]

          img = Image.open(image_path)
          draw = ImageDraw.Draw(img)
          font = ImageFont.load_default()

          draw.text((10, 10), text1, font=font, fill="white")
          draw.text((10, 30), text2, font=font, fill="white")

          img.save(output_path)

    - name: Overlay text onto wallpaper using Python script
      ansible.builtin.command:
        cmd: "python3 /usr/local/bin/overlay_text.py /usr/share/backgrounds/wallpaper.jpg /usr/share/backgrounds/final_wallpaper.jpg 'Quote: {{ quote_text }}' 'Weather: {{ weather_text }}'"
      changed_when: true

    - name: Check if XDG_CURRENT_DESKTOP is set
      set_fact:
        desktop_env: "{{ ansible_facts.env.XDG_CURRENT_DESKTOP | default('unknown') | lower }}"

    - name: Debug desktop environment
      debug:
        var: desktop_env

    - name: Set wallpaper using `community.general.dconf`
      community.general.dconf:
        key: "/org/gnome/desktop/background/picture-uri"
        value: "'file:///usr/share/backgrounds/final_wallpaper.jpg'"
        state: present
      when: "'gnome' in desktop_env"

    - name: Force `dconf update` to apply changes
      ansible.builtin.command:
        argv:
          - dconf
          - update
      when: "'gnome' in desktop_env"

    - name: Set wallpaper using `gsettings` (Fallback)
      ansible.builtin.command:
        argv:
          - gsettings
          - set
          - org.gnome.desktop.background
          - picture-uri
          - "file:///usr/share/backgrounds/final_wallpaper.jpg"
      when: "'gnome' in desktop_env"

    - name: Set wallpaper using `feh` (For non-GNOME systems like Kali)
      ansible.builtin.command:
        argv:
          - feh
          - --bg-scale
          - "/usr/share/backgrounds/final_wallpaper.jpg"
      when: "'gnome' not in desktop_env"
