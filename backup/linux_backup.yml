---
- name: Backup Linux Hosts with Duplicity (Fully Automated)
  hosts: linux
  gather_facts: yes
  vars:
    duplicity_passphrase: "kali"  # Passphrase für den GPG-Schlüssel
    backup_repo: "file:///mnt/backup/linux_duplicity"  # Pfad zum Backup-Repository
    gpg_pubkey_path: "/mnt/backup/linux_duplicity/linux_backup.pubkey"  # Pfad zur öffentlichen GPG-Pubkey-Datei
    backup_server_user: "backuper"  # Benutzername auf dem Backup-Server
    backup_server_ip: "192.168.72.131"  # IP-Adresse des Backup-Servers

  tasks:
    - name: Ensure required packages are installed (Debian/Ubuntu)
      shell: |
        apt update
        apt install -y duplicity python3-gi python3-boto3 gnupg python3-apt
      when: ansible_os_family == "Debian"
      become: yes

    - name: Ensure required packages are installed (RHEL/CentOS)
      shell: |
        yum install -y epel-release
        yum install -y duplicity python3-gobject python3-boto3 gnupg
      when: ansible_os_family == "RedHat"
      become: yes

    - name: Add backup server to known_hosts
      shell: ssh-keyscan -t ed25519 {{ backup_server_ip }} >> ~/.ssh/known_hosts
      delegate_to: localhost
      run_once: true
      args:
        executable: /bin/bash

    - name: Debug SCP command
      debug:
        msg: "Running SCP command: scp {{ backup_server_user }}@{{ backup_server_ip }}:{{ gpg_pubkey_path }} /tmp/linux_backup.pubkey"
      delegate_to: localhost
      run_once: true

    - name: Fetch GPG public key from backup server via SCP
      shell: |
        scp -o ConnectTimeout=30 {{ backup_server_user }}@{{ backup_server_ip }}:{{ gpg_pubkey_path }} /tmp/linux_backup.pubkey
      delegate_to: localhost
      run_once: true
      args:
        executable: /bin/bash
      register: scp_result
      failed_when: "'No such file or directory' in scp_result.stderr or 'Permission denied' in scp_result.stderr"

    - name: Debug SCP result
      debug:
        msg: "{{ scp_result.stdout }} | Error: {{ scp_result.stderr }}"
      when: scp_result is defined

    - name: Transfer GPG public key to target host
      copy:
        src: "/tmp/linux_backup.pubkey"  # Lokaler Pfad auf dem Control Node
        dest: "/home/{{ ansible_user }}/linux_backup.pubkey"
        mode: '0600'
      become: yes

    - name: Import GPG public key on target host
      shell: |
        gpg --import /home/{{ ansible_user }}/linux_backup.pubkey
        gpg --list-keys | grep '^pub' | awk '{print $2}' | cut -d'/' -f2
      register: gpg_key_id
      args:
        executable: /bin/bash
      become: yes

    - name: Set GPG key ID as fact
      set_fact:
        gpg_key_id: "{{ gpg_key_id.stdout }}"
      become: yes

    - name: Run backups for specified paths
      shell: |
        export PASSPHRASE={{ duplicity_passphrase }}
        duplicity full "{{ item }}" {{ backup_repo }} --encrypt-key {{ gpg_key_id }}
        unset PASSPHRASE
      loop:
        - /home
        - /etc
        - /var/log
      args:
        executable: /bin/bash
      become: yes

    - name: Verify backups were created
      shell: duplicity collection-status {{ backup_repo }}
      register: status_output
      become: yes

    - name: Debug output of backup status
      debug:
        msg: "{{ status_output.stdout_lines }}"