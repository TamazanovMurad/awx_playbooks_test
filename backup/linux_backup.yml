---
- name: Linux-Hosts für Backups konfigurieren
  hosts: linux
  become: yes
  vars:
    backup_server_ip: "192.168.100.137"
    backup_user: "backuper"
    backup_server_ssh_port: 22
    borg_passphrase: "kali"
    repo_mirror: "deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib"

  tasks:
    - name: Python3-Apt manuell installieren (falls nicht vorhanden)
      shell: apt-get update && apt-get install -y python3-apt
      args:
        executable: /bin/bash
      when: ansible_facts.packages | default([]) | selectattr('name', 'equalto', 'python3-apt') | list | length == 0

    - name: Ersetze Kali-Repository mit Aliyun-Spiegel
      lineinfile:
        path: /etc/apt/sources.list
        regex: '^deb http://kali.download/kali'
        line: "{{ repo_mirror }}"
      become: yes

    - name: APT-Paketliste aktualisieren
      apt:
        update_cache: yes

    - name: Installiere Borg Backup
      apt:
        name: borgbackup
        state: present
        update_cache: yes
        force_apt_get: yes
      register: install_result

    - name: Debug-Ausgabe bei Installationsfehler
      debug:
        msg: "Fehler: {{ install_result.stderr }}"
      when: install_result is failed

    - name: SSH-Schlüssel für root generieren
      command: ssh-keygen -t ed25519 -f /root/.ssh/id_ed25519 -N ""
      args:
        creates: /root/.ssh/id_ed25519

    - name: Öffentlichen SSH-Schlüssel abrufen
      slurp:
        src: /root/.ssh/id_ed25519.pub
      register: pubkey

    - name: Öffentlichen Schlüssel zum Backup-Server hinzufügen
      delegate_to: "{{ backup_server_ip }}"
      become: yes
      become_user: "{{ backup_user }}"
      lineinfile:
        path: ~/.ssh/authorized_keys
        line: "{{ pubkey.content | b64decode }}"
        create: yes
        mode: '0600'

    - name: Borg-Repository initialisieren
      command: >
        borg init
        --encryption=repokey
        ssh://{{ backup_user }}@{{ backup_server_ip }}:{{ backup_server_ssh_port }}/
        home/{{ backup_user }}/backup/{{ inventory_hostname }}
      environment:
        BORG_PASSPHRASE: "{{ borg_passphrase }}"
      args:
        creates: /root/.borg(Initialized
      register: init_result
      ignore_errors: yes

    - name: Borg-Passphrase speichern
      copy:
        content: "{{ borg_passphrase }}"
        dest: /root/.borg-passphrase
        mode: '0600'

    - name: Backup-Skript erstellen
      copy:
        dest: /usr/local/bin/backup_to_server.sh
        content: |
          #!/bin/bash
          export BORG_PASSPHRASE=$(cat /root/.borg-passphrase)
          borg create \
            --exclude '/dev' --exclude '/proc' --exclude '/sys' --exclude '/tmp' \
            ssh://{{ backup_user }}@{{ backup_server_ip }}:{{ backup_server_ssh_port }}/
            home/{{ backup_user }}/backup/{{ inventory_hostname }}::{now} \
            /etc /home /var/lib /root
          borg prune \
            --keep-daily=7 --keep-weekly=4 --keep-monthly=12 \
            ssh://{{ backup_user }}@{{ backup_server_ip }}:{{ backup_server_ssh_port }}/
            home/{{ backup_user }}/backup/{{ inventory_hostname }}
        mode: '0700'