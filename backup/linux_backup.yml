---
- name: Linux-Hosts für Backups konfigurieren
  hosts: kali-2
  become: yes
  vars:
    backup_server_ip: "192.168.100.137"
    backup_user: "backuper"
    backup_server_ssh_port: 22
    borg_passphrase: "kali"
    repo_mirror: "deb http://mirrors.aliyun.com/kali kali-rolling main non-free contrib"

  tasks:
    - name: APT-Repositories mit Aliyun-Spiegel aktualisieren
      shell: |
        sed -i 's/http.kali.org/mirrors.aliyun.com/g' /etc/apt/sources.list
      args:
        executable: /bin/bash

    - name: APT-Paketliste aktualisieren (shell)
      shell: apt-get update
      args:
        executable: /bin/bash

    - name: Installiere Borg Backup (shell)
      shell: apt-get install -y borgbackup
      args:
        executable: /bin/bash
      register: borg_install
      ignore_errors: yes

    - name: Prüfe Borg Backup-Installation
      assert:
        that:
          - borg_install.rc == 0
        msg: "Borg Backup-Installation fehlgeschlagen. Fehler: {{ borg_install.stderr }}"

    - name: SSH-Schlüssel für root generieren
      shell: ssh-keygen -t ed25519 -f /root/.ssh/id_ed25519 -N ""
      args:
        creates: /root/.ssh/id_ed25519
        executable: /bin/bash

    - name: Öffentlichen SSH-Schlüssel abrufen
      slurp:
        src: /root/.ssh/id_ed25519.pub
      register: pubkey

    - name: Öffentlichen Schlüssel zum Backup-Server hinzufügen
      delegate_to: "{{ backup_server_ip }}"
      become: yes
      become_user: "{{ backup_user }}"
      lineinfile:
        path: ~/.ssh/authorized_keys
        line: "{{ pubkey.content | b64decode }}"
        create: yes
        mode: '0600'

    - name: Borg-Repository initialisieren
      shell: |
        borg init --encryption=repokey ssh://{{ backup_user }}@{{ backup_server_ip }}:{{ backup_server_ssh_port }}/
        home/{{ backup_user }}/backup/{{ inventory_hostname }}
      environment:
        BORG_PASSPHRASE: "{{ borg_passphrase }}"
      args:
        creates: /root/.borg(Initialized
        executable: /bin/bash
      register: init_result
      ignore_errors: yes

    - name: Borg-Passphrase speichern
      copy:
        content: "{{ borg_passphrase }}"
        dest: /root/.borg-passphrase
        mode: '0600'

    - name: Backup-Skript erstellen
      copy:
        dest: /usr/local/bin/backup_to_server.sh
        content: |
          #!/bin/bash
          export BORG_PASSPHRASE=$(cat /root/.borg-passphrase)
          borg create \
            --exclude '/dev' --exclude '/proc' --exclude '/sys' --exclude '/tmp' \
            ssh://{{ backup_user }}@{{ backup_server_ip }}:{{ backup_server_ssh_port }}/
            home/{{ backup_user }}/backup/{{ inventory_hostname }}::{now} \
            /etc /home /var/lib /root
          borg prune \
            --keep-daily=7 --keep-weekly=4 --keep-monthly=12 \
            ssh://{{ backup_user }}@{{ backup_server_ip }}:{{ backup_server_ssh_port }}/
            home/{{ backup_user }}/backup/{{ inventory_hostname }}
        mode: '0700'