---
  - name: Backup Windows Hosts
    hosts: windows
    gather_facts: no
    vars:
      restic_password: "kali"
      backup_repo: "\\\\192.168.72.131\\backup"
      backup_paths:
        - C:\Users\ansible
        - C:\Programme
  
    tasks:
      - name: Install Chocolatey if not already installed
        win_shell: |
          if (-not (Test-Path "$env:ProgramData\Chocolatey")) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
        args:
          creates: "C:\\ProgramData\\Chocolatey"
  
      - name: Add Chocolatey to PATH
        win_path:
          elements:
            - "C:\\ProgramData\\chocolatey\\bin"
          state: present
  
      - name: Install Restic
        win_shell: choco install restic -y --force
  
      - name: Ensure the repository is mounted and initialized
        win_shell: |
          $password = "{{ restic_password }}"
          $repo = "{{ backup_repo }}"
          $mounted = net use | Select-String $repo
          if (-not $mounted) {
            net use $repo /user:backuper $password
            if ($?) {
              Write-Output "Repository mounted successfully."
            } else {
              throw "Failed to mount repository."
            }
          }
          $env:RESTIC_PASSWORD = $password
          restic -r $repo snapshots
          if ($LastExitCode -ne 0) {
            restic -r $repo init
          }
        args:
          executable: powershell
  
      - name: Run backups with verbose output
        win_shell: |
          $password = "{{ restic_password }}"
          $repo = "{{ backup_repo }}"
          $mounted = net use | Select-String $repo
          if (-not $mounted) {
            net use $repo /user:backuper $password
            if ($?) {
              Write-Output "Repository mounted successfully."
            } else {
              throw "Failed to mount repository."
            }
          }
          $env:RESTIC_PASSWORD = $password
          restic -r $repo backup {{ item }} --verbose
          if ($LastExitCode -ne 0) {
            throw "Backup failed for path: {{ item }}"
          }
        loop: "{{ backup_paths }}"
        args:
          executable: powershell
  
      - name: Verify backups were created
        win_shell: |
          $password = "{{ restic_password }}"
          $repo = "{{ backup_repo }}"
          $mounted = net use | Select-String $repo
          if (-not $mounted) {
            net use $repo /user:backuper $password
            if ($?) {
              Write-Output "Repository mounted successfully."
            } else {
              throw "Failed to mount repository."
            }
          }
          $env:RESTIC_PASSWORD = $password
          restic -r $repo snapshots
          if ($LastExitCode -ne 0) {
            throw "Failed to list snapshots."
          }
        args:
          executable: powershell
  
      - name: Cleanup Restic cache
        win_shell: restic cache --cleanup
        ignore_errors: yes
  
      - name: Unmount the repository
        win_shell: |
          net use {{ backup_repo }} /delete /yes
          if ($?) {
            Write-Output "Repository unmounted successfully."
          } else {
            Write-Warning "Failed to unmount repository."
          }
        args:
          executable: powershell