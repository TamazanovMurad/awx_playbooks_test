---
  - name: Backup Windows Hosts
    hosts: windows
    gather_facts: no
    vars:
      restic_password: "kali"
      backup_repo: "\\\\192.168.72.131\\backup"
      backup_paths:
        - C:\Users\ansible
        - C:\Programme
      smb_username: "backuper"  # SMB share username
      smb_password: "kali"      # SMB share password
    
    tasks:
      - name: Install Chocolatey if not already installed
        win_shell: |
          if (-not (Test-Path "$env:ProgramData\Chocolatey")) {
            Set-ExecutionPolicy Bypass -Scope Process -Force
            [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
            Invoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
          }
        args:
          creates: "C:\\ProgramData\\Chocolatey"
  
      - name: Add Chocolatey to PATH
        win_path:
          elements:
            - "C:\\ProgramData\\chocolatey\\bin"
          state: present
  
      - name: Install Restic using Chocolatey
        win_shell: |
          choco install restic -y --force
  
      - name: Add Restic to PATH
        win_path:
          elements:
            - "C:\\ProgramData\\chocolatey\\bin"
          state: present
  
      # Map network drive with proper credentials
      - name: Map network drive
        win_shell: |
          $Username = "{{ smb_username }}"
          $Password = ConvertTo-SecureString "{{ smb_password }}" -AsPlainText -Force
          $Cred = New-Object System.Management.Automation.PSCredential ($Username, $Password)
          
          # Remove existing connection if any
          Remove-PSDrive -Name "Z" -Force -ErrorAction SilentlyContinue
          
          # Map network drive
          New-PSDrive -Name "Z" -PSProvider FileSystem -Root "{{ backup_repo }}" -Credential $Cred -Persist
        ignore_errors: yes
  
      - name: Ensure repository is initialized
        win_shell: |
          $env:RESTIC_PASSWORD = "{{ restic_password }}"
          if (-not (restic -r Z: snapshots 2>$null)) {
              restic -r Z: init
          }
        register: repo_init_result
        ignore_errors: yes
  
      - name: Debug repository initialization result
        debug:
          var: repo_init_result
  
      - name: Run Restic Backup
        win_shell: |
          $env:RESTIC_PASSWORD = "{{ restic_password }}"
          restic backup {{ item }} --repo Z:
        loop: "{{ backup_paths }}"
  
      # Cleanup network drive mapping
      - name: Remove network drive mapping
        win_shell: |
          Remove-PSDrive -Name "Z" -Force -ErrorAction SilentlyContinue
        ignore_errors: yes