---
  - name: Backup Windows Hosts
    hosts: windows
    gather_facts: no
    vars:
      restic_password: "kali"
      backup_repo: "\\\\192.168.72.131\\backup"
      backup_paths:
        - C:\Users\ansible
        - C:\Programme
  
    tasks:
      # Installieren von Chocolatey, falls noch nicht vorhanden
      - name: Install Chocolatey
        win_shell: |
          Set-ExecutionPolicy Bypass -Scope Process -Force
          [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
          iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
        args:
          creates: "C:\\ProgramData\\Chocolatey"
  
      # Installieren von Restic über Chocolatey
      - name: Install Restic
        win_shell: choco install restic -y --force
        args:
          creates: "C:\\ProgramData\\chocolatey\\lib\\restic"
  
      # Setzen der Umgebungsvariable für das Restic-Passwort
      - name: Set RESTIC_PASSWORD environment variable
        win_environment:
          name: RESTIC_PASSWORD
          value: "{{ restic_password }}"
          state: present
          level: machine
  
      # Prüfen, ob das Repository bereits gemounted ist
      - name: Check if backup repository is already mounted
        win_shell: net use | findstr "{{ backup_repo }}"
        register: repo_check
        ignore_errors: yes
  
      # Mounten des Backup-Repositorys, wenn nicht bereits vorhanden
      - name: Mount the backup repository
        win_command: net use {{ backup_repo }} /user:backuper "{{ restic_password }}"
        register: mount_result
        when: repo_check.rc != 0
        failed_when: >
          "'erfolgreich' not in mount_result.stdout.lower() and
           'successful' not in mount_result.stdout.lower()"
        changed_when: >
          "'erfolgreich' in mount_result.stdout.lower() or
           'successful' in mount_result.stdout.lower()"
  
      # Debug-Ausgabe des Mount-Ergebnisses
      - name: Debug mount result
        debug:
          msg: "{{ mount_result.stdout_lines }}"
        when: mount_result is defined
  
      # Initialisieren des Repositorys, falls noch nicht vorhanden
      - name: Initialize Restic repository if not already initialized
        win_command: restic -r "{{ backup_repo }}" snapshots
        register: repo_init_check
        ignore_errors: yes
  
      - name: Initialize Restic repository
        win_command: restic -r "{{ backup_repo }}" init
        when: repo_init_check.rc != 0
  
      # Durchführen der Backups
      - name: Run backups for specified paths
        win_command: restic -r "{{ backup_repo }}" backup "{{ item }}" --verbose
        loop: "{{ backup_paths }}"
        register: backup_results
        failed_when: backup_results.rc != 0
  
      # Überprüfen der erstellten Snapshots
      - name: Verify backups by listing snapshots
        win_command: restic -r "{{ backup_repo }}" snapshots
        register: snapshot_list
        failed_when: snapshot_list.rc != 0
  
      # Debug-Ausgabe der Snapshots
      - name: Debug output of snapshots
        debug:
          msg: "{{ snapshot_list.stdout_lines }}"