---
- name: Backup Windows Hosts
  hosts: windows
  gather_facts: no
  vars:
    restic_password: "kali"
    backup_repo: "\\\\192.168.72.131\\backup"
    backup_paths:
      - 'C:\Users\ansible'
      - 'C:\Programme'

  tasks:
    - name: Install Chocolatey
      win_shell: |
        Set-ExecutionPolicy Bypass -Scope Process -Force
        [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072
        iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))
      args:
        creates: "C:\\ProgramData\\Chocolatey"

    - name: Install Restic
      win_shell: choco install restic -y --force
      args:
        creates: "C:\\ProgramData\\chocolatey\\lib\\restic"

    - name: Map network drive persistently
      win_shell: net use {{ backup_repo.replace('/', '\\') }} /user:backuper kali /persistent:yes
      args:
        executable: cmd
      register: net_result
      failed_when: net_result.rc != 0 and 'error 85' not in net_result.stderr  # Ignoriere "Bereits verbunden"

    - name: Initialize repo only if needed
      win_shell: restic -r "{{ backup_repo }}" snapshots --password "{{ restic_password }}" || restic -r "{{ backup_repo }}" init --password "{{ restic_password }}"
      args:
        executable: cmd
      register: init_result

    - name: Execute backups with verification
      win_shell: |
        restic backup "{{ item }}" --repo "{{ backup_repo }}" --password "{{ restic_password }}"
        restic check --repo "{{ backup_repo }}" --password "{{ restic_password }}"
      loop: "{{ backup_paths }}"
      args:
        executable: cmd
      register: backup_results

    - name: Show backup proof
      debug:
        msg: "Last backup snapshot: {{ (backup_results.results[0].stdout_lines | select('match', 'snapshot .* saved') | list)[0] }}"